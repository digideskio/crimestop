Newspeak3
'AA-Crimestop'
class CrimestopScenarios packageUsing: ns forBase: crimestopBase = (|
ImplementationBase = crimestopBase top.
crimestopBase = crimestopBase.
Policies = crimestopBase Policies.
Authorizer = crimestopBase Authorizer.

convenience = crimestopBase convenience.
ActivationMirrors = ns ActivationMirrors.
Task1App = ns Task1App  packageUsing: ns.
Task2App = ns Task2App  packageUsing: ns.

osScenario = OSScenario NewspeakMirrorsWorkaround: ns NewspeakMirrorsWorkaround.
phoneScenario = PhoneScenario NewspeakMirrorsWorkaround: ns NewspeakMirrorsWorkaround.
legacyScenario = LegacyScenario NewspeakMirrorsWorkaround: ns NewspeakMirrorsWorkaround.
testTasks = TestTasks Authorizer: Authorizer Task1App: Task1App Task2App: Task2App.

|)
(
class LegacyScenario NewspeakMirrorsWorkaround: NewspeakMirrorsWorkaround = PreScenario NewspeakMirrorsWorkaround: NewspeakMirrorsWorkaround (|

baseCrimestop = crimestopBase CrimestopTransformContain.

exampleAuthorizers = LegacyExampleAuthorizers Authorizer: Authorizer NewspeakMirrorsWorkaround: NewspeakMirrorsWorkaround.
untrustedCode = UntrustedCode legacyExampleAuthorizers: exampleAuthorizers.
|)
(
class LegacyExampleAuthorizers Authorizer: Authorizer NewspeakMirrorsWorkaround: NewspeakMirrorsWorkaround = (|
Authorizer = Authorizer.
NewspeakMirrorsWorkaround = NewspeakMirrorsWorkaround.
Mirrors = NewspeakMirrorsWorkaround.
|)
(
class ContactList = Authorizer (
(*A ContactList that someone can use and retrieve, Vanilla implementation*)| 
IO
|)
('as yet unclassified'
init: args = (
	IO: (args at: 1).
)
openList = (
	^parse: (IO openFile: AndroidContactList).
)) : ()
class FilesCWDOnly = (|
platformSpecificPathClass
|)
(
class FilePath = (|
|)
() : ('as yet unclassified'
currentDirectory = (
	^platformSpecificPathClass currentDirectory
))) : ()
class JSONModule init: args = Authorizer (|
|init: args)
('as yet unclassified'
init: args = (
	^nil.
)) : ()
class MockupIO = Authorizer (
(*As stand-in for a proper IO module that offers openFile*)|
dependencies
|)
(
class FileReader = ((*Allows to read from a file*)|
file fileOpen pos
|fileOpen:: false.
pos:: 1)
('as yet unclassified'
closeFile = (
	pos:: 0.
      fileOpen:: false.
      ^self
)
init: file = (
    file:: file.
    ^self
)
insert: string = (
	^nil.
)
openFile = (
	fileOpen:: true.
      ^self.
)
read = (
 
     (pos < 10) ifTrue: [
           pos:: pos + 1.
	      ^'a'] 
           ifFalse: [
           ^false]
)) : ()'as yet unclassified'
openFile: file = (
	^(FileReader new) init: file
)
platformSpecificPathClass = (
^nil.
)) : ()
class MockupIOCWD = (
(*To be mixed into an MockupIO to control file system accesses to home*)|
|)
('as yet unclassified'
openFile: file = ( 
     (file = '/evil/') ifFalse: [
	^(super openFile: file)].    
)) : ()
class MockupIOMonitor = (|
|)
(
class FileReader = super FileReader (||)
('as yet unclassified'
read = (
    fileOpen
        ifTrue: [^super read] 
        ifFalse: [^nil]. 
)) : ()) : ()
class MockupNetworking = Authorizer (|
|)
(
class Connection to: address = (|
|)
('as yet unclassified'
wassup = (
^'nothing'.
)) : ()'as yet unclassified'
openConnection: address = (
	^Connection new.
)) : ()
class SafeMirrors = (
(* Dummy, remove after refactoring *)|
|)
() : ()
class SafeNetworking = (|
|)
(
class Connection = super Connection (|
|)
('as yet unclassified'
wassup = (

)) : ()'as yet unclassified'
init: args = (
)) : ()) : ()
class UntrustedCode legacyExampleAuthorizers: legacyExampleAuthorizers = (| 
legacyExampleAuthorizers = legacyExampleAuthorizers.
Authorizer = legacyExampleAuthorizers Authorizer.

ChineseWallTestApp = ChineseWallTestAppDef new.
Messenger = TwitterDef new.
|)
(
class ChineseWallTest init: args = Authorizer (| dependency1 dependency2
|init: args)
('as yet unclassified'
init: params = (
    dependency1:: (params at: 1).
    dependency2:: (params at: 2).
)
run = (
dependency2 mayIuse.
dependency1 mayIuse ifFalse: [halt.].
dependency2 platformSpecificPathClass.
dependency1 mayIuse ifTrue: [halt.].
)) : ()
class ChineseWallTestAppDef = (|
    ChineseWallTest = outer UntrustedCode ChineseWallTest.|)
('as yet unclassified'
main: p args: args = (|networking io app arguments temp1|

    networking:: p MockupNetworking init.
    io:: p MockupIO init.
    arguments:: (p collections MutableArrayList with: networking) add: io; yourself.
    app:: ChineseWallTest init: arguments.
    app run.
)) : ()
class TwitterClient = Authorizer (
(**)| jsonParser networkConnection session myName
|)
(
class Session id: id password: password = (
(**)| networkAdapter id = id. password = password. session
|)
('as yet unclassified'
connect = (
	session:: networkAdapter openConnection: 'HTTPTwitterCOM'.
)
getNewMessages = (
	^session wassup.
)) : ()'as yet unclassified'
Login: id pwd: password = ( |temp1|
    myName: id.
    session:: Session id: id password: password.
    session networkAdapter: networkConnection.
    session connect.
    ^session.
)
init: args = (
	jsonParser: (args at: 1).
	networkConnection: (args at: 2).
)) : ()
class TwitterClientGUI = Authorizer ((**)|
    TwitterClient twitterClientInstance
    serverConnection
|)
('as yet unclassified'
init: args = ( |Arrays temp|
Arrays:: args at: 4.
TwitterClient:: args at: 1.
temp:: Arrays new: 2.
temp add: (args at: 2).
temp add: (args at: 3).
twitterClientInstance:: TwitterClient init: temp.
)
loginPressed = ( |temp|
serverConnection:: twitterClientInstance Login: nil pwd: nil.
serverConnection 
    ifNotNil: [(serverConnection getNewMessages = 'nyan nyan nyan') ifFalse: [halt.]]
    ifNil: [halt.].
)) : ()
class TwitterDef = (|
GUI = UntrustedCode TwitterClientGUI.
ContactList  = legacyExampleAuthorizers ContactList.
Networking = legacyExampleAuthorizers MockupNetworking.
JSONModule = legacyExampleAuthorizers JSONModule.
MockupIO = legacyExampleAuthorizers MockupIO.
TwitterClient = UntrustedCode TwitterClient.
|)
('as yet unclassified'
main: p args: args = (
	|gui contacts networking json twitterOpsLogger twitterClient temp aliens Arrays|

Arrays:: p collections OrderedCollection.

      json:: JSONModule init.
      networking:: p MockupNetworking init.

     temp:: (Arrays new: 2) add: MockupIO; add: Arrays; yourself.
	contacts:: ContactList init: temp.

     temp:: (Arrays new: 2) add: json; add: networking; yourself.
     twitterClient:: TwitterClient init: temp.

     temp:: (Arrays new: 5) add: TwitterClient;
         add: json; add: networking; add: Arrays; yourself.
     gui:: GUI init: temp.

    gui loginPressed.
)) : ()
class UndesirableUserLibrary = (|
|)
() : ()
class WWW1 = ((*A mixin for the HTTP module to simulate that someone is there  on the other side.*)|
twitterMockup|)
(
class FauxTwitterServer OuterWWW1Connection: Connection = (|
ConnectionLocalCopy = Connection.
|)
(
class ClientConnection = ConnectionLocalCopy (|

|)
('as yet unclassified'
wassup = (
      super wassup.
	^'nyan nyan nyan'.
)) : ()'as yet unclassified'
openConnection = (
^ClientConnection new.
)) : ()'as yet unclassified'
init: args = (
	super init: args.
      twitterMockup:: FauxTwitterServer OuterWWW1Connection: Connection.
     
)
openConnection: address = (
(address = 'HTTPTwitterCOM')
    ifTrue: [^twitterMockup openConnection.]
    ifFalse: [^super openConnection: address.].
)) : ()
class WWW2 = (| Deployment 
|)
('as yet unclassified'
fileTransfer: site = (
	     ^ Deployment appFrom: site. 
)
init: args = (
	super init: args.
)) : ()) : ()
class UserPolicyManager platform: platform = Policies (|
platform = platform.|)
(
class ChineseWallPolicies = DirectiveDeployer (|
policyState
|init)
(
class ChineseWallCallback east: east west: west usedList: usedList = DereferencingCallback (|
east = east. 
west = west. 
usedList = usedList.
|)
('as yet unclassified'
checkSender: sender callee: callee selector: selector args: arguments systemInfo: systemInfo = (|result|
(saysItsATest: systemInfo) ifFalse: [usedList recordModule: sender usedCapability: callee].
result:: true.

result:: result and: (
   nand: (callee capability = east mixin) 
   with:  [usedList module: sender hasRequestedCapability: west]).
result:: result and: (
   nand: [usedList module: sender hasRequestedCapability: east] 
   with:  (callee capability = west mixin)).

^result.
)
nand: first with: second = (
^(first value and: second value) not.
)
saysItsATest: systemInfo = (
^systemInfo ifNil: [^false]
                   ifNotNil: [^systemInfo isDereferencingCheck].
)) : ()
class ChineseWallDirective class: east west: west name: name = InstantiationDirective name: name (| 
eastRef = east.
westRef = west.
|)
('as yet unclassified'
acceptClass: creationContext = (
|mixins temp east west|
(*- Check that the contexts are alright, inlcuding with the current module.*)
east:: getLibraryIfFactory: eastRef. west:: getLibraryIfFactory: westRef.
mixins:: ChineseWallPolicies Set new.
mixins addAll: (ChineseWallPolicies allMixinsOf: creationContext clasz).

creationContext dependencyList dependencies do: 
    [:argument | mixins addAll: 
        (ChineseWallPolicies allMixinsOf: (getLibraryIfFactory: westRef)) ].

((mixins includes: east mixin) and: (mixins includes: west mixin))
  ifTrue: [creationContext forbidCreation. halt. ^nil.].

((mixins includes: (east mixin)) or: (mixins includes: (west mixin)))
   ifTrue: [creationContext addCallback: (ChineseWallCallback 
                  east: east 
                  west: west
                  usedList: (ChineseWallPolicies policyState)  )].

)) : ()'as yet unclassified'
allMixinsOf: object = (|mixins current |
mixins:: Set new.
((object) class class class = self class class class) 
    ifTrue:[current:: object class.]
    ifFalse:[current:: object.].

  [ mixins add: (current mixin).]
  doWhileFalse: [current:: current superclass. current = Top].
^mixins.
)
init = (
policyState:: UserPolicyManager UsedCapabilityList fromDict: Dictionary.
)) : ()
class PoliciesForTransfer = DirectiveDeployer (|
endowedCapabilities = UserPolicyManager UsedCapabilityList fromDict: Dictionary.
|)
(
class EndowmentLogger = EndowmentCallback (|
|)
('as yet unclassified'
givenCap: cap toModule: module = (
PoliciesForTransfer endowedCapabilities recordModule: module withCapability: cap
)) : ()
class LogEndowmentDirective = ConfigurationDirective name: 'Log all endowments' (|
|)
('as yet unclassified'
deploy = (
PoliciesForTransfer _resolver  addEndowmentCallback: EndowmentLogger new.
)) : ()) : ()
class UsedCapabilityList fromDict: Dictionary = (|
state = Dictionary new.
Dictionary = Dictionary.
|)
('as yet unclassified'
module: module hasRequestedCapability: capability = ( |entry|
entry:: (state associationAt: module hash ifAbsent: [nil]).
entry ifNil: [^false].
(entry value associationAt: (capability mixin hash) ifAbsent: [nil])
    ifNil: [^false]
    ifNotNil: [^true]
)
recordModule: module usedCapability: capability = ( |moduleEntry|
recordModule: module withCapability: capability
)
recordModule: module withCapability: capability = ( |moduleEntry|
state at: (module hash) 
    ifPresent: [:entries|
          entries at: (capability capability hash) put: capability; yourself] 
    ifAbsentPut: [|entries| 
         entries:: Dictionary new.
         entries at: (capability capability hash) put: capability.
         entries.].
)) : ()'as yet unclassified'
deployDefaultPolicies: capabilityLanguage = ( |polmod deployer MyLanguage GuardedObjectDirective Forbid RefinementDirective|
super deployDefaultPolicies: capabilityLanguage.
deployer:: platform Deployment.
MyLanguage:: PoliciesForTransfer mixinApply: DirectiveDeployer.
MyLanguage:: ChineseWallPolicies mixinApply: MyLanguage.
polmod:: MyLanguage new.

polmod addConfigurationDirective: (polmod LogEndowmentDirective new).

GuardedObjectDirective:: polmod GuardedObjectDirective.
RefinementDirective:: polmod RefinementDirective.

polmod addInstantiationDirective: (polmod GuardedObjectDirective class: exampleAuthorizers Mirrors name: 'Mirrors are capability').
polmod addInstantiationDirective: (polmod RefinementDirective refineModule: exampleAuthorizers Mirrors withCodeFrom: exampleAuthorizers SafeMirrors name: 'Refine Mirrors for Safety').

polmod addConfigurationDirective: (polmod PlatformInterceptDirective isCapability: exampleAuthorizers MockupIO message: 'MockupIO' name: 'mockupIO intercept').
polmod addInstantiationDirective: (GuardedObjectDirective class: exampleAuthorizers MockupIO name: 'MockupIO is capability').
polmod addInstantiationDirective: (RefinementDirective refineModule: exampleAuthorizers MockupIO withCodeFrom: exampleAuthorizers MockupIOMonitor name: 'MockupIO gets Monitor').
polmod addInstantiationDirective: (RefinementDirective refineModule: exampleAuthorizers MockupIO withCodeFrom: exampleAuthorizers MockupIOCWD name: 'MockupIO limited to CWD').

polmod addConfigurationDirective: (polmod PlatformInterceptDirective isCapability: exampleAuthorizers MockupNetworking message: 'MockupNetworking' name: 'mockupNW intercept').
polmod addInstantiationDirective: (GuardedObjectDirective class: exampleAuthorizers MockupNetworking name: 'MockupNetworking is capability').
polmod addInstantiationDirective: (RefinementDirective refineModule: exampleAuthorizers MockupNetworking withCodeFrom: exampleAuthorizers SafeNetworking name: 'Safe networking for MockupNetworking').
polmod addInstantiationDirective: (RefinementDirective refineModule: exampleAuthorizers MockupNetworking withCodeFrom: untrustedCode WWW1 name: 'Content 1 for MockupNetworking').
polmod addInstantiationDirective: (RefinementDirective refineModule: exampleAuthorizers MockupNetworking withCodeFrom: untrustedCode WWW2 name: 'Content 2 for MockupNetworking').

polmod addInstantiationDirective: (polmod FeedInStateDirective inClass: exampleAuthorizers MockupNetworking set: 'Deployment' toValue: deployer name: 'Add deployer to simulate network access thorugh windows files').

polmod addInstantiationDirective: (polmod ChineseWallDirective class: exampleAuthorizers MockupNetworking west: exampleAuthorizers MockupIO name: 'Chinese Wall: IO or HTTP').

Forbid:: polmod SuppressionDirective.
polmod addInstantiationDirective: (Forbid  forbid: untrustedCode UndesirableUserLibrary name: 'NoMirrors').

)) : ()'as yet unclassified'
on: p = ( | crimestop device|
super on: p.

crimestopBase collections ifNil: [crimestopBase collections: collections].

crimestop:: crimestopBase CrimestopTransformContain
  mirrors: p mirrors
  top: ImplementationBase 
  activationMirrors: activationMirrors
  collections: p collections
  platform: p.

crimestop deployDefaultSystemPolicies.

^ crimestop
)) : ()
class OSScenario NewspeakMirrorsWorkaround: NewspeakMirrorsWorkaround = Scenario NewspeakMirrorsWorkaround: NewspeakMirrorsWorkaround (|
baseCrimestop = crimestopBase CrimestopTransform.
osLibraries  = OSLibraries Authorizer: Authorizer.
|)
(
class Apps Authorizer: Authorizer = super Apps Authorizer: Authorizer (|
OSApplication = OSScenario OSApplication. |)
(
class BasicCameraApp = OSApplication (| App = AppDef. app
|)
(
class AppDef init: args = Authorizer (|
lastPicture ::= 0.
|)
('as yet unclassified'
pushShutterButton = (
lastPicture:: lastPicture +1.
^ lastPicture
)) : ()'as yet unclassified'
install: p = ( |temp|
temp:: App init: (OSScenario collections OrderedCollection with: p FileAccess init).
^ temp
)) : ()
class FileAccessUser = OSApplication (|
App = AppDef.
|)
(
class AppDef io: io = Authorizer (| ioLib = io.
|)
('as yet unclassified'
createFileFrom: object named: name = (
^ ioLib createFileFrom: object named: name
)
doNothing = (
halt.
)
getFileForName: name = (
^ ioLib getFileForName: name
)
getFileForToken: token = (
^ ioLib getFileForToken: token
)
getHomeDir = (
^ ioLib getHome.
)) : ()'as yet unclassified'
main: p args: args = ( |app|
app:: App  io: p FileAccess init.
^ app
)) : ()
class PhotoGallery = (| App = AppDef. app
|)
(
class AppDef init: args = Authorizer (|
bash io currentPicture net
|init: args)
('as yet unclassified'
display: picture = (
currentPicture:: picture.
^ currentPicture
)
init: args = (
bash:: args at: 1.
io:: args at: 2.
net:: args at: 3.
)
makePhoto = ( |photoAPI photo|
photoAPI:: bash getApp: 'BasicCameraApp'.
currentPicture:: photoAPI pushShutterButton.
^ currentPicture
)
savePicture: picture as: location = (
^ io addAsFile: picture atLocation: location
)
showDirectory: location = ( |dir|
dir:: io getHome getFileAt: location.
dir content values do: [:each| display: each content]
)
showPicture: location = (
^ (io getFileAt: location) content
)) : ()'as yet unclassified'
install: p = ( |collections|
collections:: OSScenario collections.
app:: App init: ((collections OrderedCollection with: p SystemCalls init) add: p FileAccess init; add: p Networking init; yourself).
^ app
)) : ()
class PhotoProvider = (| App = AppDef. app
|)
(
class AppDef init: args = Authorizer (|
bash net photos = CrimestopScenarios collections MutableArrayList with: 1.
|init: args)
('as yet unclassified'
getPictures = (
^ photos
)
init: args = (
bash:: args at: 1.
net:: args at: 2.
)) : ()'as yet unclassified'
install: p = (
app:: App init: ((collections OrderedCollection with: p SystemCalls init) add: p FileAccess init; add: p Networking init; yourself).
^ app
)) : ()
class PhotoShop = (|  App = AppDef. app

|)
(
class AppDef init: args = Authorizer (|
io
|init: args)
('as yet unclassified'
init: args = (
io:: args at: 1
)
showPicture: location = (
^ (io getFileAt: location) content
)) : ()'as yet unclassified'
install: p = ( |temp|
temp:: App init: (OSScenario collections OrderedCollection with: p FileAccess init).
^ temp
)) : ()) : ()
class Crimestop mirrors: mirrors
top: top 
activationMirrors: activationMirrors
device: device
collections: collections 
platform: p = super Crimestop mirrors: mirrors
 top: top 
activationMirrors: activationMirrors
device: device
collections: collections 
platform: p (|
|)
(
class DefaultSystemPolicies platform: platform = Policies (|
platform = platform.
|)
('as yet unclassified'
deployDefaultPolicies: capabilityLanguage = ( |polmod|
super deployDefaultPolicies: capabilityLanguage.
polmod:: self DirectiveDeployer new.

polmod addInstantiationDirective: (polmod FeedInStateDirective inClass: platformParts FileAccess set: 'osFiles' toValue: device fileSystem name: 'OS file system setup').
)) : ()'as yet unclassified'
device = (
^ super device
)) : ()
class Device name: name = super Device name: name (|
|)
() : ()
class OSApplication = (|
Authorizer = CrimestopScenarios Authorizer.
main |)
() : ()
class OSLibraries Authorizer: Authorizer = (|
	Authorizer = Authorizer.
|)
(
class LimitTraffic osNetwork: osNetwork = NetworkOps osNetwork: osNetwork (|
     totalVolume ::= 0.
     threshold = 30000.
     maySend ::= true.
|)
(
class HTTPSocket address: adr = super HTTPSocket address: adr (|
|)
() : ()'as yet unclassified'
addVolume: vol = (
   totalVolume:: totalVolume + vol.
   (totalVolume > threshold)
        ifTrue: [maySend:: false.].
)) : ()
class LimitedNetworking osNetwork: osNetwork = NetworkOps osNetwork: osNetwork (|
|)
(
class LimitedSocket to: adr = super Socket address: adr (|
|)
('as yet unclassified'
addressOK: adr = (
^ true
)) : ('as yet unclassified'
address: adr = (
(addressOK: adr)
  ifTrue: [^ self to: adr]
  ifFalse: [^ nil].
))) : ()) : ()
class PlatformParts Authorizer: Authorizer = super PlatformParts Authorizer: Authorizer (|
|)
(
class FileAccess = Authorizer (|
osFiles|)
(
class File wrapping: osFile content: content = (|
osFile = osFile.
content = content.
|)
() : ('as yet unclassified'
content: content = (
^self wrapping: nil content: osFile content
)
wrapping: osFile = (
^self wrapping: osFile content: osFile content
))'as yet unclassified'
addAsFile: object atLocation: location = (
^ osFiles addAsFile: object atLocation: location
)
createFileFrom: object named: name = (
^ osFiles createFileFrom: object named: name
)
getFileForName: location = (
^ osFiles getFileAt: location.
)
getHome = (
^ osFiles getHome
)
getRoot = (
^ osFiles getRoot.
)) : ()) : ()
class UserPolicyManager crimestop: crimestop = super UserPolicyManager platform: crimestop tamedPlatform (|
fileAccessManager = FileAccessManager osFiles: crimestop device fileSystem.
crimestop = crimestop. |)
(
class FileAccessDAC = (| fileAccessManager
|)
('as yet unclassified'
createFileFrom: object named: name = ( |superRes|
superRes:: super createFileFrom: object named: name.
fileAccessManager allowFile: superRes.
^ superRes
)
getFileForName: location = ( |theFile|
theFile:: super getFileForName: location.

(fileAccessManager fileAllowed: theFile)
    ifTrue: [^ theFile]
    ifFalse: [^ nil].
)) : ()
class FileAccessManager osFiles: osFiles = (| osFiles = osFiles. permissions = OSScenario collections Dictionary new. home = osFiles getHome.
|init)
('as yet unclassified'
allowFile: file = (
permissions at: file put: true
)
fileAllowed: file = (
(permissions includesKey: file)
    ifTrue: [^ permissions at: file]
    ifFalse: [^ false]
)
forbidFile: file = (
permissions at: file put: false
)
init = ( |node|
permissions at: osFiles getRoot put: false.
permissions at: home put: true.
forbidFile: (home getFileAt: ' protected').
)) : ()
class FileAccessTokens = (| fileAccessManager
|)
(
class Token forLocation: location = (|
location = location.
|)
() : ()'as yet unclassified'
createFileFrom: object named: name= ( |file token|
file:: osFiles createFileFrom: object named: name.
token:: Token forLocation: name.
^ token
)
getFileForName: name= (
^ nil.
)
getFileForToken: token = (
^ osFiles getFileAt: token location
)) : ()'as yet unclassified'
deployDACPolicies: capabilityLanguage = ( |polmod|
polmod:: capabilityLanguage new.

polmod addInstantiationDirective: (polmod RefinementDirective refineModule: platformParts FileAccess withCodeFrom: FileAccessDAC name: 'Refine OS IO with DAC').
polmod addInstantiationDirective: (polmod FeedInStateDirective inClass: FileAccessDAC set: 'fileAccessManager' toValue: fileAccessManager name: 'File Access manager for FileAccessDAC').

)
deployDefaultPolicies: capabilityLanguage device: device = ( |polmod|
super deployDefaultPolicies: capabilityLanguage device: device.
polmod:: capabilityLanguage new.

polmod addInstantiationDirective: (polmod GuardedObjectDirective class: platformParts FileAccess name: 'OS IO Policy').
)
deployTokenizationPolicy: capabilityLanguage = ( |polmod|
polmod:: capabilityLanguage new.

polmod addInstantiationDirective: (polmod FeedInStateDirective inClass: FileAccessTokens set: 'fileAccessManager' toValue: fileAccessManager name: 'File Access manager for FileAccessTokens').
polmod addInstantiationDirective: (polmod RefinementDirective refineModule: platformParts FileAccess withCodeFrom: FileAccessTokens name: 'Refine OS IO with Tokens').


)) : ()'as yet unclassified'
exampleAuthorizers = (
^ super exampleAuthorizers 
)
platformParts = (
^ super platformParts	
)) : ()
class PhoneScenario NewspeakMirrorsWorkaround: NewspeakMirrorsWorkaround = Scenario NewspeakMirrorsWorkaround: NewspeakMirrorsWorkaround (|

phoneLibraries  = PhoneLibraries Authorizer: Authorizer.
baseCrimestop = crimestopBase CrimestopTransformContain.
|)
(
class AndroidApplication = (| (* Every Apps need a main and needs its classes in slots.     Every apps needs a developer to communicate with anyone. *)
Authorizer = CrimestopScenarios Authorizer. 
developer main|)
(
class Activity = Authorizer (|
|)
('as yet unclassified'
onFocus = (
	
)) : ()
class BroadcastReceiver = Authorizer (|
|)
('as yet unclassified'
receiveIntent: intent = (
^ subclassResponsibility
)) : ()
class ContentProvider = Authorizer (|
|)
() : ()
class Intent action: action arguments: arguments = (|
action = action. arguments = arguments.|)
() : ()
class Main = Activity (|
|)
() : ()
class Service = Authorizer (|
|)
() : ()'as yet unclassified'
install: p = (
subclassResponsibility.
^ main
)) : ()
class Apps Authorizer: Authorizer = super Apps Authorizer: Authorizer (| AndroidApplication = PhoneScenario AndroidApplication.
|)
(
class BasicCameraApp = AndroidApplication (|
Main = MainDef.
SnapRequestReceiver = SnapRequestReceiverDef.
CameraService = CameraServiceDef. cameraService |developer:: 'Vendor')
(
class CameraServiceDef init: args = super Service (|
lastPicture bash io
|init: args)
('as yet unclassified'
init: args = (
bash:: args at: 1.
io:: args at: 2.
lastPicture:: 0.
)
pushShutterButton = (
lastPicture:: lastPicture +1.
^ lastPicture
)
savePictureAs: name = ( |file|
file:: io addToHome: lastPicture atLocation: name.
^ file
)) : ()
class MainDef init: args = super Main (|
bash cameraService
|init: args)
('as yet unclassified'
init: args = (
bash:: args at: 1.
cameraService:: args at: 2.
)
pushShutterButton = (
^ cameraService pushShutterButton
)
savePictureAs: name = (
^ cameraService savePictureAs: name
)) : ()
class SnapRequestReceiverDef init: args = super BroadcastReceiver (| bash cameraService
|)
('as yet unclassified'
init: args = (
bash:: args at: 1.
)
receiveIntent: intent = ( |picture|
picture:: cameraService pushShutterButton.
bash sendMessage: (Intent action: 'aPhoto' arguments: picture).
)) : ()'as yet unclassified'
Intent = (
^ super Intent
)
install: p = ( |systemCalls receiver collections|
systemCalls:: p SystemCalls init.
collections:: PhoneScenario collections.
cameraService:: CameraService init: ((collections OrderedCollection with: systemCalls) add: p FileAccess init; yourself ).
main:: Main init: ((collections OrderedCollection with: systemCalls) add: cameraService; yourself).
receiver:: SnapRequestReceiver init: (collections OrderedCollection with: systemCalls).
receiver cameraService: cameraService.
systemCalls subscribe: receiver toMessage: 'makePhoto'.
^ main
)) : ()
class MalformedApp = AndroidApplication (|
AClass = NonAuthorizerClass.|developer:: 'Failure Inc')
(
class NonAuthorizerClass = (|
|)
() : ()) : ()
class PhotoGallery = AndroidApplication (| 
Main = MainDef.
PhotoReceiver = PhotoReceiverDef. photoReceiver
|developer:: 'Photoview')
(
class MainDef init: args = super Main (| io bash currentPicture
|init: args)
('as yet unclassified'
display: picture = (
currentPicture:: picture.
^ currentPicture
)
init: args = (
bash:: args at: 1.
io:: args at: 2.
)
loadPicture: location = (
currentPicture:: (io getFileAt: location) content.
^ currentPicture. 
)
makePhoto = (
bash sendMessage: (Intent action: 'makePhoto' arguments: '').
)
savePicture: picture as: location = (
^ io addAsFile: picture atLocation: location
)
showDirectory: location = ( |dir|
dir:: io getHome getFileAt: location.
dir content values do: [:each| display: each content]
)) : ()
class PhotoReceiverDef init: args = super BroadcastReceiver (| main
|init: args)
('as yet unclassified'
init: args = (
main:: args at: 1.
)
receiveIntent: intent= ( |photo|
^ main display: intent arguments.
)) : ()'as yet unclassified'
Intent = (
^ super Intent
)
install: p = ( |systemCalls collections|
systemCalls:: p SystemCalls init.
collections:: PhoneScenario collections.
main:: Main init: ((collections OrderedCollection with: systemCalls) add: p FileAccess init; yourself).
photoReceiver:: PhotoReceiver init: (collections OrderedCollection with: main).
systemCalls subscribe: photoReceiver toMessage: 'aPhoto'.
^ main
)) : ()
class PhotoShop = AndroidApplication (| 
Main = MainDef.
PhotoReceiver = PhotoReceiverDef. photoReceiver
|developer:: 'Photoview')
(
class MainDef init: args = super Main (| io bash currentPicture net
|init: args)
('as yet unclassified'
editPhoto = (
currentPicture:: currentPicture + 100.
)
init: args = (
bash:: args at: 1.
io:: args at: 2.
net:: args at: 3.
)
makePhoto = (
bash sendMessage: (Intent action: 'makePhoto' arguments: '').
)
savePictureAs: name = ( |file|
file:: io addToHome: currentPicture atLocation: name.
^ file
)
setPicture: picture = (
currentPicture:: picture.
^currentPicture
)
showPicture: location = (
currentPicture:: (io getFileAt: location) content.
^ currentPicture
)) : ()
class PhotoReceiverDef init: args = super BroadcastReceiver (| main
|init: args)
('as yet unclassified'
init: args = (
main:: args at: 1.
)
receiveIntent: intent= ( |photo|
^ main setPicture: intent arguments.
)) : ()'as yet unclassified'
Intent = (
^ super Intent
)
install: p = ( |systemCalls|
systemCalls:: p SystemCalls init.
main:: Main init: ((PhoneScenario collections OrderedCollection with: systemCalls) add: p FileAccess init; add: p Networking init; yourself).
photoReceiver:: PhotoReceiver init: (PhoneScenario collections OrderedCollection with: main).
systemCalls subscribe: photoReceiver toMessage: 'aPhoto'.
^ main
)) : ()
class ToyAppCapabilityTransfer = AndroidApplication (|
Main = MainDef.|developer:: 'Vendor')
(
class MainDef init: args = super Main (| io
|init: args)
('as yet unclassified'
init: args = (
)
run = (
io addAsFile: 33 atLocation: 'any'.
^ true
)) : ()'as yet unclassified'
install: p = ( |main|
main:: Main init.
main io: (p permissionsService confideCapability: (p FileAccess init) to: main).
^ main
)) : ()) : ()
class Crimestop mirrors: mirrors top: top 
activationMirrors: activationMirrors
device: device
collections: collections 
platform: p = super Crimestop mirrors: mirrors
top: top 
activationMirrors: activationMirrors
device: device
collections: collections 
platform: p (|
|)
('as yet unclassified'
_isConformant: object metaclass: metaclass = ( |slots mainMirror slot newMember|
mainMirror:: mirrors ObjectMirror reflecting: object.
slots:: (mirrors ClassMirror reflecting: object class) slots.

slots mirrors do: [ :slotMirror |
    slot:: (mainMirror getSlot: slotMirror reflectee ifFail: [halt.]) reflectee.
    (slot = Authorizer) ifFalse: [
    slot isNil ifFalse: [
       ((convenience isModef: slot metaclass: metaclass) or: (convenience isAuthorizerDef: slot metaclass: metaclass))
           ifFalse: [ (convenience isClass: slot metaclass: metaclass)
              ifTrue: [^ false]
              ifFalse: [
                  (_isConformant: slot metaclass: metaclass) ifFalse: [^ false]].
           ]. 
       ].].].

^ true
)
device = (
^ super device
)
isConformant: object = (
^ _isConformant: object metaclass: object class class class
)) : ()
class Device name: name = super Device name: name (|
messageSystem = MessageSystem new.
|)
(
class MessageSystem = (|
private messageBindings = PhoneScenario collections Dictionary new.
|)
('as yet unclassified'
processIntent: intent = ( |receiver|
receiver:: messageBindings at: intent action.
receiver receiveIntent: intent
)
subscribe: recipient toMessage: string = (
messageBindings at: string put: recipient.
)) : ()
class System = super System (|
|)
('as yet unclassified'
addApp: app name: name = (
(Device crimestop isConformant: app) ifFalse: [^ false].
^ super addApp: app name: name
)
messageSystem = (
^ Device messageSystem	
)) : ()) : ()
class PhoneLibraries Authorizer: Authorizer = (| Authorizer = Authorizer.
FileAccess = PhoneScenario platformParts FileAccess.|)
(
class ReadOnly osFiles: osFiles = FileAccess osFiles: osFiles (|
|)
('as yet unclassified'
addAsFile: object atLocation: location = (
^ false
)
addSubdirectory: name = (
^ nil
)
addToHome: object atLocation: location = (
^ false
)
getRoot = (
^nil.
)) : ()
class RestrictedWriteAccess osFiles: osFiles = FileAccess osFiles: osFiles (|
|)
('as yet unclassified'
addAsFile: object atLocation: location = (
(osFiles getRoot hasFile: location) ifTrue: [^ false].
^ osFiles getRoot addAsFile: object atLocation: location
)
addSubdirectory: name = (
^ nil
)
addToHome: object atLocation: location = (
(osFiles getHome hasFile: location) ifTrue: [^ false].
^ osFiles getHome addAsFile: object atLocation: location
)
getRoot = (
^nil.
)) : ()
class WriteOnly osFiles: osFiles = FileAccess osFiles: osFiles (|
|)
('as yet unclassified'
getFileAt: location = (
^ false
)
getHome = (
^ false
)
getRoot = (
^ false
)) : ()) : ()
class PlatformParts Authorizer: Authorizer = super PlatformParts Authorizer: Authorizer (|
|)
(
class FileAccess osFiles: osFiles = Authorizer (|
osFiles ::= osFiles.|)
('as yet unclassified'
addAsFile: object atLocation: location = (
^ osFiles addAsFile: object atLocation: location
)
addSubdirectory: name = (
^ getRoot addSubdirectory: name
)
addToHome: object atLocation: location = (
^ osFiles addAtHome: object atLocation: location
)
getFileAt: location = (
^ osFiles getFileAt: location.
)
getHome = (
^ osFiles getHome
)
getRoot = (
^ osFiles getRoot
)) : ()
class SystemCalls = super SystemCalls (|
|)
('as yet unclassified'
sendMessage: intent = (
^ system messageSystem processIntent: intent
)
subscribe: recipient toMessage: string= (
^ system messageSystem subscribe: recipient toMessage: string.
)) : ()) : ()
class UserPolicyManager crimestop: crimestop = super UserPolicyManager platform: crimestop tamedPlatform (|
platform= platform.

|)
(
class ApplicationSpecificRefinements = DirectiveDeployer (|
|)
(
class RefinementDirectivePerApp refineModule: moduleRef withCodeFrom: refinementRef ifIn: application name: name = super RefinementDirective refineModule: moduleRef withCodeFrom: refinementRef name: name (|
application = application.
|)
('as yet unclassified'
acceptClass: messageContext = (
|clasz dependencyList module refinement|
refinement:: getLibraryIfFactory: refinementRef. 
module:: getLibraryIfFactory: moduleRef.
dependencyList:: messageContext dependencyList.
clasz:: messageContext clasz.

((convenience _class: clasz containsMixin: module mixin butLacksRefinement: refinement)  
and: (messageContext sender class = application))
      ifTrue: [clasz:: refinement mixin apply: clasz].

messageContext clasz: clasz.
)) : ()) : ()'as yet unclassified'
deployDefaultPolicies: capabilityLanguage device: device = ( |polmod deployer MyLanguage RefinementDirectivePerApp|
super deployDefaultPolicies: capabilityLanguage device: device.
deployer:: platform Deployment.
MyLanguage:: PoliciesForTransfer mixinApply: DirectiveDeployer.
MyLanguage:: ApplicationSpecificRefinements mixinApply: MyLanguage.
polmod:: MyLanguage new.

polmod addInstantiationDirective: (polmod GuardedObjectDirective class: PhoneScenario platformParts FileAccess name: 'Phone IO is Capability').

RefinementDirectivePerApp:: polmod RefinementDirectivePerApp.

polmod addInstantiationDirective: (RefinementDirectivePerApp refineModule: PhoneScenario platformParts FileAccess withCodeFrom: phoneLibraries RestrictedWriteAccess ifIn: PhoneScenario apps BasicCameraApp name: 'Camera write restrictions').

polmod addInstantiationDirective: (RefinementDirectivePerApp refineModule: PhoneScenario platformParts FileAccess withCodeFrom: phoneLibraries ReadOnly ifIn: PhoneScenario apps PhotoGallery name: 'Phone IO write restrictions').

polmod addInstantiationDirective: (RefinementDirectivePerApp refineModule: PhoneScenario platformParts FileAccess withCodeFrom: phoneLibraries WriteOnly ifIn: PhoneScenario apps BasicCameraApp name: 'No camera reads').
 
)) : ()'as yet unclassified'
exampleAuthorizers = (
^ super exampleAuthorizers 
)
platformParts = (
^ super platformParts
)) : ()
class PreScenario NewspeakMirrorsWorkaround: NewspeakMirrorsWorkaround = (|
collections activationMirrors Dictionary List|)
('as yet unclassified'
on: p = (
collections ifNil: [
    collections:: p collections. 
    Dictionary:: p collections Dictionary. 
    List:: p collections OrderedCollection].
activationMirrors ifNil: [activationMirrors:: ActivationMirrors usingPlatform: p].
)) : ()
class Scenario NewspeakMirrorsWorkaround: NewspeakMirrorsWorkaround = PreScenario NewspeakMirrorsWorkaround: NewspeakMirrorsWorkaround (| 
apps = Apps Authorizer: Authorizer.
platformParts = PlatformParts Authorizer: Authorizer.
baseCrimestop = crimestopBase CrimestopCore.
hub |)
(
class Apps Authorizer: Authorizer = (| Authorizer = Authorizer.
|)
(
class BasicCameraApp = (| lastPicture
|)
('as yet unclassified'
pushShutterButton = (
^ subclassResponsibility
)) : ()
class PhotoGallery = (|
|)
('as yet unclassified'
display: picture = (
^ subclassResponsibility
)
makePhoto = (
^ subclassResponsibility
)
savePicture: picture as: location = (
^ subclassResponsibility
)
showDirectory: location = (
^ subclassResponsibility
)
showPicture: location = (
^ subclassResponsibility
)
showRemoteLocation: name = (
^ subclassResponsibility
)) : ()
class PhotoProvider = (|
|)
() : ()
class PhotoShop = (|
|)
('as yet unclassified'
showPicture: location = (
^ subclassResponsibility
)) : ()) : ()
class Crimestop mirrors: mirrors top: top 
activationMirrors: activationMirrors
device: device
collections: collections 
platform: p = baseCrimestop mirrors: mirrors
top: top 
activationMirrors: activationMirrors
collections: collections 
platform: p (|
device = device.
|)
() : ()
class Device name: name = (|
name = name.
crimestop
apps = Scenario collections Dictionary new: 6.
system = System  new.
fileSystem = FileSystem new.
networkingSystem = NetworkingSystem hub: Scenario hub.
|)
(
class FileSystem = (| private root = Directory new.
home = Directory new.
|root addFileObject: home atLocation: 'home'.
home addFileObject:File dummyFile atLocation: 'protected')
(
class Directory = (|
content = Scenario collections Dictionary new.
|)
('as yet unclassified'
addAsFile: object atLocation: location = (
^ content at: location put: (FileSystem File content: object)
)
addFileObject: object atLocation: location = (
^ content at: location put: object
)
addSubdirectory: name = ( |dir|
dir:: FileSystem Directory new.
content at: name put: dir.
^ dir
)
getFileAt: location = (
(content includesKey: location)
     ifTrue: [^ content at: location]
     ifFalse: [^ nil].

halt.
)
hasFile: location = (
^ content includesKey: location
)) : ()
class File content: content = (|
content ::= content.|)
() : ('as yet unclassified'
dummyFile = (
^ self content: 'dummy'
))'as yet unclassified'
addAsFile: object atLocation: location = (
^ root addAsFile: object atLocation: location
)
addAtHome: object atLocation: location = (
^ home addAsFile: object atLocation: location
)
createFileFrom: object named: name = (
^ home addFileObject: (File content: object) atLocation: name.
)
getFileAt: location = (
^ home getFileAt: location
)
getHome = (
^ root getFileAt: 'home'
)
getRoot = (
^ root.
)) : ()
class NetworkingSystem hub: hub = (| hub = hub.
|)
(
class Connection to: URL = (| URL = URL.
|)
() : ()) : ()
class System = (|
|)
('as yet unclassified'
addApp: app name: name = ( |activity safeApp|
safeApp:: crimestop prepareImport: app.
activity:: safeApp install: crimestop tamedPlatform.
apps at: name put: activity.
^ true
)
getApp: name = (
^ apps at: name.
)) : ()) : ()
class PlatformParts Authorizer: Authorizer = (|
Authorizer = Authorizer.
|)
(
class NetworkOps = Authorizer (| osNetwork
|)
(
class HTTPSocket address: address port: port = Socket address: address port: port (|
|)
() : ()
class Socket address: address port: port = (|
address = address. 
port = port.
|)
() : ()) : ()
class SystemCalls = (| system
|)
('as yet unclassified'
addApp: app name: name = (
^ system addApp: app name: name
)
getApp: name = (
^ system getApp: name
)) : ()) : ()
class TheHub = (| dict = Scenario collections Dictionary new.
|)
('as yet unclassified'
at: key <ByteSymbol> put: device <Device> = (
^ dict at: key put: device
)) : ()
class UserPolicyManager platform: platform = Policies (|
platform = platform.|)
(
class PoliciesForTransfer = DirectiveDeployer (|
endowedCapabilities = UserPolicyManager UsedCapabilityList fromDict: Dictionary.
|)
(
class EndowmentLogger = EndowmentCallback (|
|)
('as yet unclassified'
givenCap: cap toModule: module = (
PoliciesForTransfer endowedCapabilities recordModule: module withCapability: cap
)) : ()
class LogEndowmentDirective = ConfigurationDirective name: 'Log all endowments' (|
|)
('as yet unclassified'
deploy = (
PoliciesForTransfer _resolver  addEndowmentCallback: EndowmentLogger new.
)) : ()) : ()
class UsedCapabilityList fromDict: Dictionary = (|
state = Dictionary new.
Dictionary = Dictionary.
|)
('as yet unclassified'
module: module hasRequestedCapability: capability = ( |entry|
entry:: (state associationAt: module hash ifAbsent: [nil]).
entry ifNil: [^false].
(entry value associationAt: (capability mixin hash) ifAbsent: [nil])
    ifNil: [^false]
    ifNotNil: [^true]
)
recordModule: module usedCapability: capability = ( |moduleEntry|
recordModule: module withCapability: capability
)
recordModule: module withCapability: capability = ( |moduleEntry|
state at: (module hash) 
    ifPresent: [:entries|
          entries at: (capability capability hash) put: capability; yourself] 
    ifAbsentPut: [|entries| 
         entries:: Dictionary new.
         entries at: (capability capability hash) put: capability.
         entries.].
)) : ()'as yet unclassified'
deployDefaultPolicies: capabilityLanguage device: device = ( |polmod deployer MyLanguage GuardedObjectDirective RefinementDirective|
super deployDefaultPolicies: capabilityLanguage.
deployer:: platform Deployment.
MyLanguage:: PoliciesForTransfer mixinApply: DirectiveDeployer.
polmod:: MyLanguage new.

polmod addConfigurationDirective: (polmod LogEndowmentDirective new).

polmod addConfigurationDirective: (polmod PlatformInterceptDirective isCapability: platformParts FileAccess  message: 'FileAccess' name: 'Wrap file access').
polmod addInstantiationDirective: (polmod FeedInStateDirective inClass: platformParts FileAccess set: 'osFiles' toValue: device fileSystem name: 'feed implementation of files to file system authorizer').

polmod addConfigurationDirective: (polmod PlatformInterceptDirective isCapability: platformParts NetworkOps message: 'Networking' name: 'Wrap network access').
polmod addInstantiationDirective: (polmod FeedInStateDirective inClass: platformParts NetworkOps set: 'osNetwork' toValue: device networkingSystem name: 'feed implementation of networking to network authorizer').

GuardedObjectDirective:: polmod GuardedObjectDirective.
RefinementDirective:: polmod RefinementDirective.

polmod addConfigurationDirective: (polmod PlatformInterceptDirective isCapability: platformParts SystemCalls message: 'SystemCalls' name: 'provide system calls').
polmod addInstantiationDirective: (polmod FeedInStateDirective inClass: platformParts SystemCalls set: 'system' toValue: device system name: 'feed implementation of system to authorizer').
)) : ()'as yet unclassified'
on: p  = ( | crimestop|
^ on: p deviceName: 'default'
)
on: p deviceName: name = ( | crimestop device|
super on: p.
hub ifNil: [hub:: TheHub new ].


device:: Device name: name.

crimestop:: Crimestop
  mirrors: p mirrors
  top: ImplementationBase 
  activationMirrors: activationMirrors
  device: device
  collections: p collections
  platform: p.

crimestop deployDefaultSystemPolicies.

device crimestop: crimestop.
hub at: name put: device.

^ crimestop
)) : ()
class TestTasks Authorizer: Authorizer Task1App: Task1App Task2App: Task2App = (|
Authorizer = Authorizer.
Task1App = Task1App.
Task2App = Task2App.
|)
(
class CapabilitiesCanBePassed = (|
App = CheckEndowed.
|)
('as yet unclassified'
main: p args: args = (|networking app arguments|

    networking:: p MockupNetworking init.
    arguments:: p collections MutableArrayList with: nil.
    app:: App init: arguments.
    app dependency: networking.
    ^app run.

)) : ()
class CheckEndowed init: args = Authorizer (| dependency
|init: args)
('as yet unclassified'
init: args = (
dependency:: args at: 1.
)
run = (
^dependency mayIuse
)) : ()
class InitializationIsEndowment = (|
    App = CheckEndowed.
|)
('as yet unclassified'
main: p args: args = (|networking app arguments|

    networking:: p MockupNetworking init .
    arguments:: p collections MutableArrayList with: networking.
    app:: App init: arguments.
    ^app run.

)) : ()) : ()) : ()